import java.util.LinkedList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;
import java.io.FileWriter;
import java.io.IOException;

// Vehicle class definition
class Vehicle {
    private String make;
    private String model;
    private double milesPerGallon;

    public Vehicle(String make, String model, double milesPerGallon) {
        this.make = make;
        this.model = model;
        this.milesPerGallon = milesPerGallon;
    }

    public String getMake() {
        return make;
    }

    public String getModel() {
        return model;
    }

    public double getMilesPerGallon() {
        return milesPerGallon;
    }

    @Override
    public String toString() {
        return "Make: " + make + ", Model: " + model + ", MPG: " + milesPerGallon;
    }
}

// Comparator for sorting vehicles by milesPerGallon
class MilesPerGallonComparator implements Comparator<Vehicle> {
    @Override
    public int compare(Vehicle v1, Vehicle v2) {
        return Double.compare(v1.getMilesPerGallon(), v2.getMilesPerGallon());
    }
}

public class VehicleDataEntry {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        LinkedList<Vehicle> vehicleList = new LinkedList<>();

        // Loop for data entry
        while (true) {
            System.out.println("Enter vehicle make (or type 'exit' to finish):");
            String make = scanner.nextLine();
            if (make.equalsIgnoreCase("exit")) break;

            System.out.println("Enter vehicle model:");
            String model = scanner.nextLine();

            double milesPerGallon = -1;
            while (milesPerGallon <= 0) {
                System.out.println("Enter vehicle miles per gallon:");
                try {
                    milesPerGallon = Double.parseDouble(scanner.nextLine());
                    if (milesPerGallon <= 0) {
                        System.out.println("Miles per gallon must be a positive number. Please try again.");
                    }
                } catch (NumberFormatException e) {
                    System.out.println("Invalid input. Please enter a valid number for miles per gallon.");
                }
            }

            vehicleList.add(new Vehicle(make, model, milesPerGallon));
        }

        // Sorting the linked list by miles per gallon
        Collections.sort(vehicleList, new MilesPerGallonComparator());

        // Writing sorted list to a text file
        try (FileWriter writer = new FileWriter("VehicleData.txt")) {
            for (Vehicle vehicle : vehicleList) {
                writer.write(vehicle.toString() + "\n");
            }
            System.out.println("Vehicle data has been written to VehicleData.txt");
        } catch (IOException e) {
            System.out.println("An error occurred while writing to the file.");
            e.printStackTrace();
        }

        scanner.close();
    }
}
